<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.spring.member.dao.MemberMapper">
	<!-- 회원 가입 -->
	<insert id="insertMember" parameterType="memberVO">
		INSERT INTO member (
			mem_num,
			mem_id,
			mem_nickname) 
		VALUES (
			#{mem_num},
			#{mem_id},
			#{mem_nickname})
	</insert>
	
	<!-- 회원 가입 상세 -->
	<insert id="insertMember_detail" parameterType="memberVO">
		INSERT INTO member_detail (
			mem_num,
			mem_name,
			mem_passwd,
			mem_phone,
			mem_email,
			mem_zipcode,
			mem_address1,
			mem_address2)
		VALUES (
			#{mem_num},
			#{mem_name},
			#{mem_passwd},
			#{mem_phone},
			#{mem_email},
			#{mem_zipcode},
			#{mem_address1},
			#{mem_address2})
	</insert>
	
	<!-- 회원 가입 포인트 -->
	<insert id="insertMember_point" parameterType="memberVO">
		INSERT INTO member_point (
			pt_num,
			mem_num,
			pt_amount,
			pt_content)
		VALUES (
			#{pt_num},
			#{mem_num},
			'2000',
			'회원가입')
	</insert>
	
	<!-- 아이디 찾기 -->
	<select id="selectMemberId" parameterType="memberVO">
		SELECT mem_id
		FROM member JOIN member_detail USING(mem_num)
		WHERE mem_name=#{mem_name} 
		AND mem_email=#{mem_email}
	</select>

	<!-- 아이디 중복 체크 및 로그인 체크 -->
	<select id="selectCheckMember" parameterType="String">
		SELECT
			mem_id,
			mem_num,
			mem_auth,
			mem_nickname,
			mem_au_id,
			mem_passwd,
			mem_email
		FROM member LEFT OUTER JOIN member_detail
		USING(mem_num)
		WHERE mem_id=#{id}
	</select>

	<!-- 아이디 찾기 -->
	<select id="findMemberId" parameterType="MemberVO" resultType="MemberVO">
	    SELECT mem_id       		   
	    FROM member LEFT OUTER JOIN member_detail
        USING(mem_num)
	    WHERE mem_name=#{mem_name} AND 
	    mem_email=#{mem_email}
	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id="selectMemberPw" parameterType="MemberVO" resultType="MemberVO">
		SELECT *
		FROM member LEFT OUTER JOIN member_detail
		USING(mem_num)
		WHERE mem_id=#{mem_id} AND 
		mem_name=#{mem_name} AND 
		mem_email=#{mem_email}
	</select>
	
	<!-- 회원 상세 정보 수정 -->
	<update id="updateMember_detail" parameterType="memberVO">
		UPDATE member_detail SET
			mem_email=#{mem_email},
			mem_phone=#{mem_phone},
			mem_zipcode=#{mem_zipcode},
			mem_address1=#{mem_address1},
			mem_address2=#{mem_address2},
			mem_modify_date=SYSDATE
		WHERE mem_num=#{mem_num}
	</update>
	
	<!-- 포인트 게시판 글의 총개수/검색 개수 -->
	<select id="selectRowCount" parameterType="map" resultType="integer">
		SELECT
			COUNT(*)
		FROM member_point
		WHERE mem_num=#{mem_num}
	</select>
	
	<!-- 포인트 게시판 전체 목록/검색 목록 -->
	<select id="selectPointList" parameterType="map" resultType="memberVO">
		SELECT
			*
		FROM (SELECT
				a.*,
				rownum rnum
			FROM (SELECT 
			        pt_num,
			        pt_amount, 
			        SUM(pt_amount) OVER (ORDER BY pt_num ASC) total_point,
			        pt_content,
			        pt_reg_date 
			      FROM member_point 
			      WHERE mem_num=#{mem_num} 
			      ORDER BY pt_reg_date DESC)a)
			<![CDATA[
		   	WHERE rnum >= #{start} AND rnum <= #{end}
		   	]]>
	</select>
	
	<!-- sql 태그외 include 태그를 이용해 SQL문 재사용 -->
	<sql id="commSearch">
        <if test="keyword != null and keyword != ''">
            <choose>
                <when test="keyfield == 1">
                    AND comm_title LIKE '%' || #{keyword} || '%'
                </when>
                <when test="keyfield == 2">
                    AND (mem_id LIKE '%' || #{keyword} || '%' OR
                    mem_nickname LIKE '%' || #{keyword} || '%')
                </when>
                <when test="keyfield == 3">
                    AND comm_content LIKE '%' || #{keyword} || '%'
                </when>
                <when test="keyfield == 4">
                    AND (comm_title LIKE '%' || #{keyword} || '%' OR
                    comm_content LIKE '%' || #{keyword} || '%')
                </when>
            </choose>
        </if>
        <if test="comm_category != null and comm_category != ''">
            AND comm_category = #{comm_category}
        </if>
	</sql>
	
	<sql id="commOrder">
		<if test="order == 1">
			ORDER BY comm_num DESC
		</if>
		<if test="order == 2">
			ORDER BY comm_hit DESC
		</if>
		<if test="order == 3">
			ORDER BY fav_cnt DESC NULLS LAST
		</if>
		<if test="order == 4">
			ORDER BY re_cnt DESC NULLS LAST
		</if>
	</sql>	
	
	<!-- 사용자가 작성한 글 개수/검색 글 개수 -->
	<select id="selectWriteRowCount" parameterType="map" resultType="integer">
		SELECT
		 COUNT(*)
		FROM comm JOIN member USING(mem_num) WHERE mem_num=#{mem_num}
		<include refid="commSearch"></include>
	</select>
	
	<!-- 사용자가 작성한 글 전체 목록 -->
	<select id="selectAllWriteList" parameterType="map" resultType="commVO">
		SELECT
		  *
		FROM (SELECT
				a.*,
				rownum rnum
				FROM(SELECT
				 		comm_num,
				 		<![CDATA[
				 		REPLACE(REPLACE(comm_title, '<', '&lt;'),'>','&gt;') comm_title, 
				 		]]>
				 		comm_hit,
				 		comm_regdate,
				 		comm_category,
				 		mem_num,
				 		mem_id,
				 		mem_nickname,
				 		re_cnt,
				 		fav_cnt
				 	FROM comm
				 	LEFT OUTER JOIN (SELECT COUNT(*) re_cnt, comm_num FROM comm_reply GROUP BY comm_num) USING (comm_num)
				 	LEFT OUTER JOIN (SELECT COUNT(*) fav_cnt, comm_num FROM comm_fav GROUP BY comm_num) USING(comm_num)
			   		JOIN member USING(mem_num)
			   		WHERE mem_num = #{mem_num}
			   		<include refid="commSearch"></include>
			   		<include refid="commOrder"></include>)a)
			   	<![CDATA[
			   	WHERE rnum >= #{start} AND rnum <= #{end}
			   	]]>
	</select>
	
	<!-- 사용자가 좋아요한 글 목록 -->
	<select id="selectFavList" parameterType="list">
		SELECT c.comm_num, c.comm_category, c.comm_title, m.mem_id, m.mem_nickname, c.comm_regdate
		FROM comm c
		INNER JOIN comm_fav cf ON c.comm_num = cf.comm_num
		INNER JOIN member m ON c.mem_num = m.mem_num
		WHERE cf.mem_num = #{mem_num}
	</select>
	
	<!-- 사용자가 좋아요한 글 개수/검색 글 개수 -->
	<select id="selectFavRowCount" parameterType="map" resultType="integer">
		SELECT COUNT(*)
		FROM comm c
		INNER JOIN comm_fav cf ON c.comm_num = cf.comm_num
		INNER JOIN member m ON c.mem_num = m.mem_num
		WHERE cf.mem_num = #{mem_num}
		<include refid="commSearch"></include>
	</select>
	
	<!-- 사용자가 좋아요한 글 전체 목록 -->
	<select id="selectAllFavList" parameterType="map" resultType="commVO">
		SELECT
		    *
		FROM (
		    SELECT
		        a.*,
		        rownum rnum
		    FROM (
		        SELECT
		            c.comm_num,
		            <![CDATA[
			 		REPLACE(REPLACE(comm_title, '<', '&lt;'),'>','&gt;') comm_title, 
			 		]]>
		            c.comm_hit,
		            c.comm_regdate,
		            c.comm_category,
		            m.mem_num,
		            m.mem_id,
		            m.mem_nickname,
		            re_cnt,
		            fav_cnt
		        FROM comm c
		        LEFT OUTER JOIN (SELECT COUNT(*) re_cnt, comm_num FROM comm_reply GROUP BY comm_num) re ON c.comm_num = re.comm_num
		        LEFT OUTER JOIN (SELECT COUNT(*) fav_cnt, comm_num FROM comm_fav GROUP BY comm_num) fav ON c.comm_num = fav.comm_num
		        INNER JOIN comm_fav cf ON c.comm_num = cf.comm_num
		        INNER JOIN member m ON c.mem_num = m.mem_num
		        WHERE cf.mem_num = #{mem_num}
		        <include refid="commSearch"></include>
		   		<include refid="commOrder"></include>)a)
		   	<![CDATA[
			WHERE rnum >= #{start} AND rnum <= #{end}
			]]>
	</select>
</mapper>